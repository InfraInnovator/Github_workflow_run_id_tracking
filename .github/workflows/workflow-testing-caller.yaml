# Demo workflow to trigger another workflow and monitor its completion using a unique ID.
# This pattern is useful when a workflow needs to trigger another workflow and wait for its specific run to finish,
# especially when multiple instances of the called workflow might run concurrently.

name: Example Workflow Caller
run-name: ${{ github.actor }} triggered calling workflow run

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  trigger_and_monitor:
    name: Trigger and Monitor Called Workflow
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTOR: ${{ github.actor }}
      # Dynamically determine the API URL for the current repository
      REPO_API_URL: "${{ github.api_url }}/repos/${{ github.repository }}"
      # Filename of the workflow to be called in the same repository
      WORKFLOW_TO_CALL: "workflow-testing-receiving.yaml"
    permissions:
      actions: write # Required to dispatch workflows and read run/job status
      contents: read
    steps:
      - name: Trigger and Monitor Workflow
        run: |
          # Generate a unique ID for this specific trigger instance.
          # This ID will be passed to the called workflow and used to identify its corresponding run.
          job_trigger_id=$(uuidgen)
          echo "Generated unique job trigger ID: $job_trigger_id"
          echo "Attempting to trigger workflow: ${{ env.WORKFLOW_TO_CALL }} in repo ${{ github.repository }} on ref ${{ github.ref_name }}"

          # Use the GitHub API to trigger the 'workflow_dispatch' event on the target workflow.
          # Pass the unique job_trigger_id as an input.
          http_code=$(curl -s -w "%{http_code}" -o /dev/null -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "${{ env.REPO_API_URL }}/actions/workflows/${{ env.WORKFLOW_TO_CALL }}/dispatches" \
              -d "{
                \"ref\":\"${{ github.ref_name }}\",
                \"inputs\": {
                  \"job_trigger_id\": \"$job_trigger_id\"
                }
              }")
          echo "Trigger API response HTTP code: $http_code"
          if [ "$http_code" -ne 204 ]; then
            echo "Error: Failed to trigger workflow. HTTP status code: $http_code"
            exit 1
          fi
          echo "Workflow triggered successfully. Polling for its run ID using trigger ID $job_trigger_id."

          # Wait briefly to allow the triggered workflow run to initialize.
          # Adjust sleep duration based on typical workflow start times if needed.
          echo "Waiting 90 seconds for the workflow run to start..."
          sleep 90

          # Poll the GitHub API to find the run ID of the workflow we just triggered.
          # We identify the correct run by looking for a job within that run whose name contains our unique job_trigger_id.
          attempt=0
          max_attempts=10
          poll_interval_seconds=15
          run_id=""
          echo "Polling for the run ID (max $max_attempts attempts, interval ${poll_interval_seconds}s)..."

          while [ -z "$run_id" ] && [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Polling attempt $attempt/$max_attempts..."
            # Fetch recent workflow runs triggered by workflow_dispatch for the specific workflow file and actor.
            runs_response=$(curl -s -L \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "${{ env.REPO_API_URL }}/actions/workflows/${{ env.WORKFLOW_TO_CALL }}/runs?actor=${{ env.GITHUB_ACTOR }}&event=workflow_dispatch&branch=${{ github.ref_name }}&per_page=10")
            # Extract run IDs from the response.
            run_ids=$(echo "$runs_response" | jq -r '.workflow_runs[] | .id')

            if [ -z "$run_ids" ]; then
              echo "No recent runs found for ${{ env.WORKFLOW_TO_CALL }} by ${{ env.GITHUB_ACTOR }}."
            else
              echo "Found recent run IDs: $run_ids"
              # Check jobs within each recent run for our unique trigger ID in the job name.
              for id in $run_ids; do
                echo "Checking jobs in run ID: $id for job trigger ID: $job_trigger_id"
                jobs_response=$(curl -s -L \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "${{ env.REPO_API_URL }}/actions/runs/$id/jobs")

                # Use jq to safely check if any job name contains the job_trigger_id.
                job_name_match=$(echo "$jobs_response" | jq -r --arg trigger_id "$job_trigger_id" '.jobs[] | select(.name | contains($trigger_id)) | .name')

                if [ -n "$job_name_match" ]; then
                  run_id=$id
                  echo "Success: Found matching run ID: $run_id (Job: '$job_name_match')"
                  break # Exit the inner loop once the run ID is found
                fi
              done
            fi # End check if run_ids is empty

            # If run_id is found, exit the while loop
            if [ -n "$run_id" ]; then
              break
            fi

            # Wait before the next polling attempt if run_id not found yet
            echo "Run ID not found yet. Waiting ${poll_interval_seconds} seconds..."
            sleep $poll_interval_seconds
          done # End polling loop

          # Check if we successfully found the run ID.
          if [ -z "$run_id" ]; then
            echo "Error: Could not find workflow run with trigger ID $job_trigger_id after $max_attempts attempts."
            exit 1
          fi

          # Once the run ID is found, poll for its completion status.
          echo "Monitoring run ID $run_id for completion..."
          status_poll_interval=30
          while true; do
            # Fetch the current status of the workflow run.
            status_response=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${{ env.REPO_API_URL }}/actions/runs/$run_id")

            status=$(echo "$status_response" | jq -r '.status')
            conclusion=$(echo "$status_response" | jq -r '.conclusion') # Will be null until completed

            echo "Run $run_id status: $status, Conclusion: $conclusion"

            # Check if the workflow run has completed.
            if [ "$status" = "completed" ]; then
              if [ "$conclusion" = "success" ]; then
                echo "Called workflow (Run ID: $run_id) succeeded."
                exit 0 # Exit script with success
              else
                echo "Error: Called workflow (Run ID: $run_id) failed with conclusion: $conclusion."
                # Optionally, fetch logs or artifacts here if needed for debugging.
                exit 1 # Exit script with failure
              fi
            fi # End status check

            # Wait before checking the status again.
            echo "Run $run_id not completed yet. Waiting $status_poll_interval seconds..."
            sleep $status_poll_interval
          done # End status monitoring loop
